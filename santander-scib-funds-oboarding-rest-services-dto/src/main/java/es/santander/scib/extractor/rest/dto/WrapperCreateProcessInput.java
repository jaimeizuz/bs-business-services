/**
 * Document Data Extractor
 * This API extracts metadata from unstructured documents using artificial intelligence (AI).  The process is asynchronous and requires that the document from which metadata is to be extracted is first uploaded separately to a repository, as the document itself is not provided in the API request.  The API can be used to: - Initiate a metadata extraction. - Verify the status of a file extraction. - Retrieve the metadata from a file extraction - Send feedback for extracted metadata.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: apiglobalgovernance@gruposantander.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package es.santander.scib.extractor.rest.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import es.santander.scib.extractor.rest.dto.ModelFile;
import es.santander.scib.extractor.rest.dto.Process;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

@JsonPropertyOrder({
  WrapperCreateProcessInput.JSON_PROPERTY_PROCESS_I_D,
  WrapperCreateProcessInput.JSON_PROPERTY_URI
})
/**
  * Data structure containing the required information to initiate a metadata extraction
  */

public class WrapperCreateProcessInput  implements Serializable {
  
  public static final String JSON_PROPERTY_PROCESS_I_D = "processID";
  
  private Process processID;

  public static final String JSON_PROPERTY_URI = "uri";
  
  private ModelFile uri;

  /**
   * Get processID
   * @return processID
   **/
  @NotNull
  @JsonProperty(JSON_PROPERTY_PROCESS_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Process getProcessID() {
    return processID;
  }

  /**
   * Set processID
   */
  @JsonProperty(JSON_PROPERTY_PROCESS_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProcessID(Process processID) {
    this.processID = processID;
  }

  public WrapperCreateProcessInput processID(Process processID) {
    this.processID = processID;
    return this;
  }

  /**
   * Get uri
   * @return uri
   **/
  @NotNull
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ModelFile getUri() {
    return uri;
  }

  /**
   * Set uri
   */
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(ModelFile uri) {
    this.uri = uri;
  }

  public WrapperCreateProcessInput uri(ModelFile uri) {
    this.uri = uri;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WrapperCreateProcessInput {\n");
    
    sb.append("    processID: ").append(toIndentedString(processID)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

